using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
//using DigitalVoterList.PollingTable;



namespace DigitalVoterList.Test
{
    using DigitalVoterList.PollingTable;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using global::DBComm.DBComm;
    using global::DBComm.DBComm.DAO;
    using global::DBComm.DBComm.DataGeneration;
    using global::DBComm.DBComm.DO;
    
    [TestClass]
    public class PollingTableTest
    {
        private Model model;

        private PessimisticVoterDAO pvdao;

        private VoterDO voter;

        private string password = "abc123";

        private string server = "localhost";

        /*The cprno is auto generated by this instance of the DVL. 
         To run sucessfully the cpr no needs to exist in the data base. */
        private uint testCprNo = 0104158875;

        [TestInitialize]
        public void Setup()
        {
            voter = new VoterDO(1, 3112999999, "Test Person", "TestRoad 31", "Testville", true, false);

            model = new Model();
            model.CurrentVoterChanged += (v => voter = v); //Subscribes to the current voter changed event.
            SetupInfo si = new SetupInfo(server, 5);
            model.SetupInfo = si;
            model.AdminPass = password;
            
        }

        [TestCleanup]
        public void TearDown()
        {
            model = null;
            voter = null;
        }

        [TestMethod]
        public void DAOCleanupTest()
        {
            model.initializeStaticDAO();
            Model.cleanUpDAO();
            Assert.IsTrue(Model.StaticPvdao.TransactionStarted() == false);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod]
        public void FetchVoterTest()
        {
            //Test if known voter is found
            uint cpr = testCprNo;
            model.initializeStaticDAO();
            VoterDO voter = model.FetchVoter(cpr);
            Assert.AreEqual(cpr, voter.PrimaryKey);
            Model.cleanUpDAO();
        }

        [TestMethod]
        public void FindVoterTest()
        {
            model.initializeStaticDAO();
            model.FindVoter((uint)voter.PrimaryKey);
            Model.cleanUpDAO();
            Assert.AreEqual(model.currentVoter.PrimaryKey, testCprNo);
        }

        //[TestMethod]
        //public void FindVoterTest()
        //{
        //    Model model = new Model();
        //    VoterDO voter;
        //    model.CurrentVoterChanged += (v => voter = v);

        //    SetupInfo si = new SetupInfo(server, 0);
        //    model.SetupInfo = si;
        //    model.AdminPass = password;
            
        //    model.initializeStaticDAO();
        //    model.FindVoter(testCprNo);
        //    Model.cleanUpDAO();

        //    Assert.AreEqual(model.currentVoter.PrimaryKey, testCprNo);
        //}

        [TestMethod]
        public void test()
        {
            Assert.AreEqual(1, 1);
        }

        [TestMethod]
        public void RegisterCurrentVoterTest()
        {
            //uint cpr = 3112999998;

            //create a voter dummy and register as voted
            //VoterDO voter = new VoterDO(1, cpr, "Test", "Testvej 42", "Testby", true, false);
            VoterDAO vdao = new VoterDAO(DigitalVoterList.GetInstance("root", password, server));
            vdao.Create(voter);

            //Model model = new Model();
            //SetupInfo si = new SetupInfo(server, 0);
            //model.SetupInfo = si;
            //model.AdminPass = password;

            //model.CurrentVoterChanged += (v => voter = v);

            model.initializeStaticDAO();
            model.FindVoter((uint)voter.PrimaryKey);
            model.RegisterCurrentVoter();
            Assert.IsTrue(model.currentVoter.Voted == true);
            
            //Delete voter again.
            vdao.Delete(v => v.PrimaryKey == voter.PrimaryKey);
            Model.cleanUpDAO();
        }

        public void UnregisterCurrentVoterTest()
        {
            
        }


    }
}
