using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
//using DigitalVoterList.PollingTable;



namespace DigitalVoterList.Test
{
    using DigitalVoterList.PollingTable;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using global::DBComm.DBComm;
    using global::DBComm.DBComm.DAO;
    using global::DBComm.DBComm.DataGeneration;
    using global::DBComm.DBComm.DO;
    //using MySql.Data.MySqlClient;

    [TestClass]
    public class PollingTableTest
    {
        private Model model;

        private PessimisticVoterDAO pvdao;

        private string password = "abc123";

        private string server = "localhost";

        /*The cprno is auto generated by this instance of the DVL. 
         To run sucessfully the cpr no needs to exist in the data base. */
        private uint testCprNo = 3112141087;

        [TestInitialize]
        public void Setup()
        {
            model = new Model();
            SetupInfo si = new SetupInfo(server, 5);
            model.SetupInfo = si;
            model.AdminPass = password;
            //pvdao = new PessimisticVoterDAO(server, password);
        }

        //[TestCleanup]
        //public void TearDown()
        //{

        //}

        [TestMethod]
        public void DAOCleanupTest()
        {
            model.initializeStaticDAO();
            Model.cleanUpDAO();
            Assert.IsTrue(Model.StaticPvdao.TransactionStarted() == false);
        }

        /// <summary>
        /// The cprno is auto generated by this instance of the DVL. 
        /// To run sucessfully the cpr no needs to exist in the data base.
        /// </summary>
        [TestMethod]
        public void FetchVoterTest()
        {
            //Test if known voter is found
            uint cpr = testCprNo;
            model.initializeStaticDAO();
            VoterDO voter = model.FetchVoter(cpr);
            Assert.AreEqual(cpr, voter.PrimaryKey);
            Model.cleanUpDAO();
        }

        [TestMethod]
        public void FindVoterTest()
        {

            model.initializeStaticDAO();
            model.FindVoter(testCprNo);
            Assert.AreEqual(testCprNo, model.currentVoter.PrimaryKey);
            Model.cleanUpDAO();
        }

        [TestMethod]
        public void test()
        {
            Assert.AreEqual(1, 1);
        }

        [TestMethod]
        public void ReadConfigTest()
        {
            //First we write
            SetupInfo si = new SetupInfo("test", 42);
            model.SetupInfo = si;
            model.WriteToConfig();
            model.ReadConfig();
            Assert.AreEqual(1, 1);
            //Assert model.SetupInfo.Ip
        }


    }
}
