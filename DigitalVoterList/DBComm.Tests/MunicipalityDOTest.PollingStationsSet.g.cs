// <copyright file="MunicipalityDOTest.PollingStationsSet.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace DBComm.DBComm.DO
{
    public partial class MunicipalityDOTest
    {
[TestMethod]
[PexGeneratedBy(typeof(MunicipalityDOTest))]
public void PollingStationsSet556()
{
    MunicipalityDO municipalityDO;
    municipalityDO = new MunicipalityDO(default(uint?), (string)null, (string)null);
    PollingStationDO[] pollingStationDOs = new PollingStationDO[3];
    this.PollingStationsSet
        (municipalityDO, (ICollection<PollingStationDO>)pollingStationDOs);
    Assert.IsNotNull((object)municipalityDO);
    Assert.IsNotNull(municipalityDO.PollingStations);
    Assert.IsNull((object)(municipalityDO.Id));
    Assert.AreEqual<string>((string)null, municipalityDO.Address);
    Assert.AreEqual<string>((string)null, municipalityDO.Name);
}
[TestMethod]
[PexGeneratedBy(typeof(MunicipalityDOTest))]
public void PollingStationsSet900()
{
    MunicipalityDO municipalityDO;
    municipalityDO = new MunicipalityDO(default(uint?), (string)null, (string)null);
    PollingStationDO[] pollingStationDOs = new PollingStationDO[2];
    this.PollingStationsSet
        (municipalityDO, (ICollection<PollingStationDO>)pollingStationDOs);
    Assert.IsNotNull((object)municipalityDO);
    Assert.IsNotNull(municipalityDO.PollingStations);
    Assert.IsNull((object)(municipalityDO.Id));
    Assert.AreEqual<string>((string)null, municipalityDO.Address);
    Assert.AreEqual<string>((string)null, municipalityDO.Name);
}
[TestMethod]
[PexGeneratedBy(typeof(MunicipalityDOTest))]
public void PollingStationsSet798()
{
    MunicipalityDO municipalityDO;
    municipalityDO = new MunicipalityDO(default(uint?), (string)null, (string)null);
    PollingStationDO[] pollingStationDOs = new PollingStationDO[1];
    this.PollingStationsSet
        (municipalityDO, (ICollection<PollingStationDO>)pollingStationDOs);
    Assert.IsNotNull((object)municipalityDO);
    Assert.IsNotNull(municipalityDO.PollingStations);
    Assert.IsNull((object)(municipalityDO.Id));
    Assert.AreEqual<string>((string)null, municipalityDO.Address);
    Assert.AreEqual<string>((string)null, municipalityDO.Name);
}
[TestMethod]
[PexGeneratedBy(typeof(MunicipalityDOTest))]
public void PollingStationsSet623()
{
    MunicipalityDO municipalityDO;
    municipalityDO = new MunicipalityDO(default(uint?), (string)null, (string)null);
    PollingStationDO[] pollingStationDOs = new PollingStationDO[0];
    this.PollingStationsSet
        (municipalityDO, (ICollection<PollingStationDO>)pollingStationDOs);
    Assert.IsNotNull((object)municipalityDO);
    Assert.IsNotNull(municipalityDO.PollingStations);
    Assert.IsNull((object)(municipalityDO.Id));
    Assert.AreEqual<string>((string)null, municipalityDO.Address);
    Assert.AreEqual<string>((string)null, municipalityDO.Name);
}
[TestMethod]
[PexGeneratedBy(typeof(MunicipalityDOTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PollingStationsSetThrowsContractException590()
{
    try
    {
      MunicipalityDO municipalityDO;
      municipalityDO =
        new MunicipalityDO(default(uint?), (string)null, (string)null);
      this.PollingStationsSet(municipalityDO, (ICollection<PollingStationDO>)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
